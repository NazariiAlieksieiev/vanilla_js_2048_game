{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","startMessage","loseMessage","winMessage","field","gameScore","initialState","newState","isWinner","score","fieldMarking","children","map","row","buttonHandler","classList","contains","remove","add","innerText","toggle","addTile","render","emptyCell","y","x","number","emptyCells","forEach","rowIndex","cell","columnIndex","push","Math","floor","random","length","elem","move","e","key","left","right","down","up","i","j","isCanMove","checkRows","newRow","filter","index","splice","concat","Array","fill","reversRows","reverse","tarnsporteState","_","checkColumns","some","column","addEventListener"],"mappings":"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","file":"main.7fce9e6a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\n\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nconst field = document.querySelector('tbody');\nconst gameScore = document.querySelector('.game-score');\n\nlet initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet newState = 0;\nlet isWinner = false;\nlet score = 0;\n\nconst fieldMarking = [...field.children].map(row => [...row.children]);\n\nbutton.addEventListener('click', buttonHandler);\ndocument.addEventListener('keyup', move);\n\nfunction buttonHandler() {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n    loseMessage.classList.toggle('hidden', true);\n    winMessage.classList.toggle('hidden', true);\n  }\n\n  addTile();\n  addTile();\n  render();\n}\n\nfunction addTile() {\n  const [y, x] = emptyCell();\n\n  initialState[y][x] = number();\n}\n\nfunction emptyCell() {\n  const emptyCells = [];\n\n  initialState.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n};\n\nfunction number() {\n  return Math.random() >= 0.9 ? 4 : 2;\n};\n\nfunction render() {\n  initialState.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const elem = fieldMarking[rowIndex][columnIndex];\n\n      elem.classList = 'field-cell';\n\n      if (cell === 0) {\n        elem.innerText = '';\n      } else {\n        elem.innerText = cell;\n        elem.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  gameScore.innerText = score;\n}\n\nfunction move(e) {\n  newState = initialState;\n\n  const { key } = e;\n\n  switch (key) {\n    case 'ArrowLeft':\n      left();\n      break;\n\n    case 'ArrowRight':\n      right();\n      break;\n\n    case 'ArrowDown':\n      down();\n      break;\n\n    case 'ArrowUp':\n      up();\n      break;\n\n    default:\n      return;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (newState[i][j] !== initialState[i][j]) {\n        initialState = newState;\n        addTile();\n        render();\n\n        if (isWinner) {\n          winMessage.classList.remove('hidden');\n\n          return;\n        }\n\n        if (!isCanMove()) {\n          loseMessage.classList.remove('hidden');\n        }\n\n        return;\n      }\n    }\n  }\n}\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newState = newState.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWinner = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(4 - newRow.length).fill(0));\n  });\n};\n\nfunction reversRows() {\n  newState.forEach(row => row.reverse());\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reversRows();\n  left();\n  reversRows();\n}\n\nfunction tarnsporteState() {\n  newState = newState[0]\n    .map((_, columnIndex) => newState\n      .map(row => row[columnIndex]));\n}\n\nfunction up() {\n  tarnsporteState();\n  left();\n  tarnsporteState();\n}\n\nfunction down() {\n  tarnsporteState();\n  right();\n  tarnsporteState();\n}\n\nfunction isCanMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  tarnsporteState();\n\n  return checkColumns();\n};\n\nfunction checkRows() {\n  return newState.some(row =>\n    row.some((cell, index) =>\n      cell === 0 || cell === row[index + 1]\n    )\n  );\n}\n\nfunction checkColumns() {\n  return newState.some((column, i) => {\n    return column.some((cell, j) => {\n      return newState[i][j + 1] === cell;\n    });\n  });\n}\n"]}